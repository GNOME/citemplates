.flatpak:
  image: 'registry.gitlab.gnome.org/gnome/gnome-runtime-images/gnome:master'
  stage: 'test'
  interruptible: true
  tags:
    - flatpak
  script:
    # Report the installed versions of the runtime
    - flatpak info org.gnome.Platform
    - flatpak info org.gnome.Sdk

    # Print the date, since appstream depends on local timezone
    - date && date -u

    - rewrite-flatpak-manifest ${MANIFEST_PATH} ${FLATPAK_MODULE} ${CONFIG_OPTS}
    - flatpak-builder --user --disable-rofiles-fuse flatpak_app --repo=repo ${BRANCH:+--default-branch=$BRANCH} ${MANIFEST_PATH}
    # Generate a Flatpak bundle
    - flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
    - tar cf repo.tar repo/

    # Run automatic tests inside the Flatpak env
    # we need to recreate the build directory because cleanup would have deleted build dependencies
    - rm -rf flatpak_app
    - flatpak-builder --user --disable-rofiles-fuse --build-only flatpak_app ${MANIFEST_PATH}
    - flatpak build-finish --socket=x11 --share=network flatpak_app
    - >
      xvfb-run -a -s "-screen 0 1024x768x24"
      flatpak-builder --user --disable-rofiles-fuse --build-shell=${FLATPAK_MODULE} flatpak_app ${MANIFEST_PATH} <<END

      LANG=C.UTF-8
      NO_AT_BRIDGE=1
      dbus-run-session
      meson test --no-stdsplit --print-errorlogs ${TEST_RUN_ARGS}

      END

  artifacts:
    name: 'Flatpak artifacts'
    expose_as: 'Get Flatpak bundle here'
    when: 'always'
    paths:
      - "${BUNDLE}"
      - 'repo.tar'
      - '.flatpak-builder/build/${FLATPAK_MODULE}/_flatpak_build/meson-logs/meson-log.txt'
      - '.flatpak-builder/build/${FLATPAK_MODULE}/_flatpak_build/meson-logs/testlog.txt'
    reports:
      junit: '.flatpak-builder/build/${FLATPAK_MODULE}/_flatpak_build/meson-logs/testlog.junit.xml'
    expire_in: 14 days
  cache:
    - key: "$CI_JOB_NAME"
      paths:
        - '.flatpak-builder/downloads'
        - '.flatpak-builder/git'
    - key: "$CI_JOB_NAME"
      paths:
        - '.flatpak-builder/cache'
        - '.flatpak-builder/ccache'

.publish_nightly:
  image: 'registry.gitlab.gnome.org/gnome/gnome-runtime-images/flat-manager-client'
  stage: 'deploy'
  timeout: '100m'
  script:
    - tar xf repo.tar
    - flatpak build-update-repo --generate-static-deltas repo/
    - BUILD_ID=$(flat-manager-client create ${FLAT_MANAGER_URL} ${FLATPAK_REPO})
    - flat-manager-client push --commit --publish --wait ${BUILD_ID} repo/ || result=$?
    - flat-manager-client purge ${BUILD_ID}
    - exit $result
  variables:
    FLAT_MANAGER_URL: https://nightly.gnome.org/
    FLATPAK_REPO: nightly
  only:
    refs:
      - 'master'
      - 'main'
      - 'mainline'
      - $CI_DEFAULT_BRANCH
    variables:
      - $REPO_TOKEN

# This is not meant to be used as part of every CI pipeline, but
# instead on special occasions like when tagging a beta release.
#
# Ideally there are special requirements for pushing to flathub-beta
# that you need to make sure you follow if you want to use this.
# Whats needed is the following:
#
# * Ask a sysadmin to add a FLATHUB_BETA_TOKEN to your project and
#   make sure your branch is protected
# * Make sure you application depends on a runtime found in Flathub
#   or Flathub beta. You shouldn't use this with the Nightly runtime.
# * Make sure your 'branch' in the Flatpak manifest is beta,
#   if you haven't specified a branch in the manifest you can use $BRANCH
#   variable in the .flatpak template to change the --default-branch
# * Change only: and when: yaml keys to fit your needs
.publish_beta:
  image: 'registry.gitlab.gnome.org/gnome/gnome-runtime-images/flat-manager-client'
  stage: 'deploy'
  timeout: '100m'
  script:
    - tar xf repo.tar
    - export REPO_TOKEN=$FLATHUB_BETA_TOKEN
    - flatpak build-update-repo --generate-static-deltas repo/
    - BUILD_ID=$(flat-manager-client create ${FLAT_MANAGER_URL} ${FLATPAK_REPO})
    - flat-manager-client push --commit --publish --wait ${BUILD_ID} repo/ || result=$?
    - flat-manager-client purge ${BUILD_ID}
    - exit $result
  when: 'manual'
  variables:
    FLAT_MANAGER_URL: 'https://hub.flathub.org'
    FLATPAK_REPO: 'beta'
  only:
    refs:
      - 'master'
      - 'main'
      - 'mainline'
      - $CI_DEFAULT_BRANCH
    variables:
      - $FLATHUB_BETA_TOKEN
