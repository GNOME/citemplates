spec:
  inputs:
    job-name:
      default: "build-gnomeos"
      description: "Name for the job"
    job-stage:
      default: "build"
      description: "Stage to run the job"
    image-ref:
      default: "quay.io/gnome_infrastructure/gnome-build-meta:core-nightly"
      description: "Specify the OCI image to use"
    meson-options:
      default: ""
      description: "List of options to setup the meson project"
    meson-sourcedir:
      default: "."
      description: "Meson sourcedir path. Useful if the project is not in the root directory"
    run-tests:
      default: "yes"
      # Some test-suites have unique environment requirements
      description: "Whether to execute the testsuite pass empty value to skip"
    meson-test-options:
      default: ""
      description: "List of options passed to meson test. Example: --no-suite foo"
    asan-options:
      default: ""
      description: "Value of ASAN_OPTIONS variable"
    asan-enabled:
      default: true
      type: "boolean"
      description: "Enable or Disable the asan build"
    tsan-options:
      default: ""
      description: "Value of TSAN_OPTIONS variable"
    tsan-enabled:
      default: true
      type: "boolean"
      description: "Enable or Disable the tsan build"
    ubsan-options:
      default: ""
      description: "Value of UBSAN_OPTIONS variable"
    ubsan-enabled:
      default: true
      type: "boolean"
      description: "Enable or Disable the ubsan build"
---
".$[[ inputs.job-name ]]-script-test": &test
  - export XDG_RUNTIME_DIR="$(mktemp -p "${CI_PROJECT_DIR:-/tmp}" -d xdg-runtime-XXXXXX)"

  # GNOMEOS needs the libdir to be manually specified as otherwise meson will
  # resolve it to /lib64
  # Even thought we prefixed the component with gnomeos-, there isn't anything special
  # about it and can be used with any image as long the deps exist
  - os_id="$(grep '^ID=' /etc/os-release)"
  - >-
    if [[ "$os_id" == "ID=org.gnome.os" ]]; then
      optional_set_libdir="--libdir=lib/$(gcc -print-multiarch)"
    fi

  - echo "$CFLAGS"
  - echo "$CXXFLAGS"
  - meson setup ${_BUILDDIR} $[[ inputs.meson-sourcedir]] --prefix=/usr $optional_set_libdir $_INTERNAL_MESON_ARGS $[[ inputs.meson-options ]]
  - meson compile -C ${_BUILDDIR}
  - >-
    if [[ "$[[ inputs.run-tests ]]" = "yes" || "$[[ inputs.run-tests ]]" = "1"  ]]; then
      xvfb-run -a -s "-screen 0 1024x768x24" meson test -C ${_BUILDDIR} --print-errorlogs --no-stdsplit --no-rebuild $[[ inputs.meson-test-options ]]
    fi

".$[[ inputs.job-name ]] common":
  image: $[[ inputs.image-ref ]]
  tags:
    - "x86_64_v3"
  stage: $[[ inputs.job-stage ]]
  needs: []
  variables:
    _DESTDIR: "$CI_PROJECT_DIR/destdir/"
    # Adding CI_PROJECT_DIR in front is buggy when used with the artifacts paths
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37204
    _BUILDDIR: "$CI_PROJECT_DIR/_builddir"
    _BUILDDIR_FOR_ARTIFACTS: "_builddir"
    # FIXME: use meson c_args instead
    CFLAGS: "-fno-omit-frame-pointer -g"
    CXXFLAGS: "$CFLAGS"
  script:
    - *test

    - meson dist -C ${_BUILDDIR} --no-tests
    - mkdir -p public-dist
    - cp -r "${_BUILDDIR}/meson-dist/" "${CI_PROJECT_DIR}/public-dist/"

    - mkdir -p ${_DESTDIR}
    - meson install -C ${_BUILDDIR} --no-rebuild --destdir=${_DESTDIR}

    # Export the documentation if it exist
    - >-
      if [[ -d "${_DESTDIR}/usr/share/doc/" ]]; then
        tar --create --auto-compress --file "$CI_PROJECT_DIR/${CI_PROJECT_NAME}-docs.tar.gz" --directory ${_DESTDIR}/usr/share/doc/ .
      fi
  after_script:
    # Cleanup the destdir and thus container volume once we are done
    - rm -rvf ${_DESTDIR}
  artifacts:
    expire_in: "2 days"
    when: "always"
    paths:
      - "${_BUILDDIR_FOR_ARTIFACTS}/meson-logs/"
      - "${_BUILDDIR_FOR_ARTIFACTS}/meson-dist/"
      - "public-dist"
      - "${CI_PROJECT_NAME}-docs.tar.gz"
    reports:
      junit: "${_BUILDDIR_FOR_ARTIFACTS}/meson-logs/testlog.junit.xml"

"$[[ inputs.job-name ]]":
  extends: ".$[[ inputs.job-name ]] common"

"$[[ inputs.job-name ]]-asan":
  extends: ".$[[ inputs.job-name ]] common"
  needs:
    - job: "$[[ inputs.job-name ]]"
      artifacts: false
  # ASAN requires debugging capabilities
  tags: ["asan"]
  variables:
    ASAN_OPTIONS: "$[[ inputs.asan-options ]]"
    _INTERNAL_MESON_ARGS: "-Db_sanitize=address"
    # https://clang.llvm.org/docs/AddressSanitizer.html#usage
    CFLAGS: "-fno-omit-frame-pointer -O1 -fno-optimize-sibling-calls -g"
  script:
    - *test
  rules:
    - if: '"$[[ inputs.asan-enabled ]]" == "true" && "$[[ inputs.run-tests ]]" == "yes"'

"$[[ inputs.job-name ]]-tsan":
  extends: ".$[[ inputs.job-name ]] common"
  needs:
    - job: "$[[ inputs.job-name ]]"
      artifacts: false
  variables:
    TSAN_OPTIONS: "$[[ inputs.tsan-options ]]"
    _INTERNAL_MESON_ARGS: "-Db_sanitize=thread"
  script:
    - *test
  rules:
    - if: '"$[[ inputs.tsan-enabled ]]" == "true" && "$[[ inputs.run-tests ]]" == "yes"'

"$[[ inputs.job-name ]]-ubsan":
  extends: ".$[[ inputs.job-name ]] common"
  needs:
    - job: "$[[ inputs.job-name ]]"
      artifacts: false
  variables:
    UBSAN_OPTIONS: "$[[ inputs.ubsan-options ]]"
    _INTERNAL_MESON_ARGS: "-Db_sanitize=undefined"
    # https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#stack-traces-and-report-symbolization
    # FIXME: fno-sanitize-merge is not available in gcc
    CFLAGS: "-fno-omit-frame-pointer -g"
  script:
    - *test
  rules:
    - if: '"$[[ inputs.ubsan-enabled ]]" == "true" && "$[[ inputs.run-tests ]]" == "yes"'
