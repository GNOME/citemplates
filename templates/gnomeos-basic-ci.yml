spec:
  inputs:
    job-name:
      default: "build-gnomeos"
      description: "Name for the job"
    job-stage:
      default: "build"
      description: "Stage to run the job"
    image-ref:
      default: "quay.io/gnome_infrastructure/gnome-build-meta:core-nightly"
      description: "Specify the OCI image to use"
    meson-options:
      default: null
      description: "List of options to setup the meson project"
    meson-sourcedir:
      default: "."
      description: "Meson sourcedir path. Useful if the project is not in the root directory"
    run-tests:
      default: "yes"
      # Some test-suites have unique environment requirements
      description: "Whether to execute the testsuite pass empty value to skip"
    meson-test-options:
      default: null
      description: "List of options passed to meson test. Example: --no-suite foo"
    before-script:
      default: null
      description: "Optional before-script to execute"
    clang:
      default: "enabled"
      options:
        - "enabled"
        - "disabled"
      description: "Add a build job with clang"
    asan-options:
      default: "detect_leaks=0"
      description: "Value of ASAN_OPTIONS variable. Note it defaults to detect_leaks=0 since we have a separate lsan job"
    asan:
      default: "enabled"
      options:
        - "enabled"
        - "disabled"
      description: "Enable or Disable the asan build"
    lsan-options:
      default: null
      description: "Value of ASAN_OPTIONS variable"
    lsan:
      default: "enabled"
      options:
        - "enabled"
        - "disabled"
      description: "Enable or Disable the asan build"
    tsan-options:
      default: null
      description: "Value of TSAN_OPTIONS variable"
    tsan:
      # Disable tsan until the glib bugs are resolved
      # https://gitlab.gnome.org/GNOME/glib/-/issues/1672
      # https://gitlab.gnome.org/GNOME/glib/-/issues/3695
      default: "disabled"
      options:
        - "enabled"
        - "disabled"
      description: "Enable or Disable the tsan build"
    ubsan-options:
      default: null
      description: "Value of UBSAN_OPTIONS variable"
    ubsan:
      default: "enabled"
      options:
        - "enabled"
        - "disabled"
      description: "Enable or Disable the ubsan build"
    grcov-c:
      default: "enabled"
      options:
        - "enabled"
        - "disabled"
      description: "Enable or Disable the grcov report"
    scan-build:
      default: "enabled"
      options:
        - "enabled"
        - "disabled"
      description: "Enable or Disable the scan-build report"
---
".$[[ inputs.job-name ]]-script-build": &build
  - export XDG_RUNTIME_DIR="$(mktemp -p "${CI_PROJECT_DIR:-/tmp}" -d xdg-runtime-XXXXXX)"

  # GNOMEOS needs the libdir to be manually specified as otherwise meson will
  # resolve it to /lib64
  # Even thought we prefixed the component with gnomeos-, there isn't anything special
  # about it and can be used with any image as long the deps exist
  - os_id="$(grep '^ID=' /etc/os-release)"
  - >-
    if [[ "$os_id" == "ID=org.gnome.os" ]]; then
      optional_set_libdir="--libdir=lib/$(gcc -print-multiarch)"
    fi

  - echo "$CC"
  - echo "$CXX"
  - echo "$CFLAGS"
  - echo "$CXXFLAGS"
  - echo "$optional_set_libdir"
  - echo "$_INTERNAL_MESON_ARGS"

  - meson setup ${_BUILDDIR} $[[ inputs.meson-sourcedir]] --prefix=/usr $optional_set_libdir $_INTERNAL_MESON_ARGS $[[ inputs.meson-options ]]
  - meson compile -C ${_BUILDDIR}

".$[[ inputs.job-name ]]-script-test": &test
  - *build
  - >-
    if [[ "$[[ inputs.run-tests ]]" = "yes" || "$[[ inputs.run-tests ]]" = "1"  ]]; then
      dbus-run-session -- mutter --headless --wayland --no-x11 --virtual-monitor 1024x768 -- meson test -C ${_BUILDDIR} --print-errorlogs --no-stdsplit --no-rebuild $[[ inputs.meson-test-options ]]
    fi

".$[[ inputs.job-name ]] common":
  image: 
    name: $[[ inputs.image-ref ]]
    docker:
      user: "root"
  tags:
    - "x86_64_v3"
  stage: $[[ inputs.job-stage ]]
  needs: []
  variables:
    _DESTDIR: "$CI_PROJECT_DIR/destdir/"
    # Adding CI_PROJECT_DIR in front is buggy when used with the artifacts paths
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37204
    _BUILDDIR: "$CI_PROJECT_DIR/_builddir"
    _BUILDDIR_FOR_ARTIFACTS: "_builddir"
    # FIXME: use meson c_args instead
    CFLAGS: "-fno-omit-frame-pointer -g"
    CXXFLAGS: "$CFLAGS"
  before_script: $[[ inputs.before-script ]]
  script:
    - *test

    - meson dist -C ${_BUILDDIR} --no-tests
    - cp -r "${_BUILDDIR}/meson-dist/" "${CI_PROJECT_DIR}/public-dist/"

    - mkdir -p ${_DESTDIR}
    - meson install -C ${_BUILDDIR} --no-rebuild --destdir=${_DESTDIR}

    # Export the documentation if it exist
    - >-
      if [[ -d "${_DESTDIR}/usr/share/doc/" ]]; then
        tar --create --auto-compress --file "$CI_PROJECT_DIR/${CI_PROJECT_NAME}-docs.tar.gz" --directory ${_DESTDIR}/usr/share/doc/ .
      fi
  after_script:
    # Cleanup the destdir and thus container volume once we are done
    - rm -rvf ${_DESTDIR}
  artifacts:
    expire_in: "2 days"
    when: "always"
    paths:
      - "${_BUILDDIR_FOR_ARTIFACTS}/meson-logs/"
      - "${_BUILDDIR_FOR_ARTIFACTS}/meson-dist/"
      - "public-dist"
      - "${CI_PROJECT_NAME}-docs.tar.gz"
    reports:
      junit: "${_BUILDDIR_FOR_ARTIFACTS}/meson-logs/testlog.junit.xml"

"$[[ inputs.job-name ]]":
  extends: ".$[[ inputs.job-name ]] common"

"$[[ inputs.job-name ]]-clang":
  extends: ".$[[ inputs.job-name ]] common"
  # These are job configuration and I absolutely hate that
  # they are variables rather than arguments we can pass
  # to a script, but all we have is inline bash inside yaml
  # so we have to make due with it for now.
  variables:
    CC: "ccache clang"
    CXX: "ccache clang++"
  rules:
    - if: '"$[[ inputs.clang ]]" == "enabled"'

"$[[ inputs.job-name ]]-asan":
  extends: ".$[[ inputs.job-name ]] common"
  needs:
    - job: "$[[ inputs.job-name ]]"
      artifacts: false
  # ASAN requires debugging capabilities
  tags: ["asan"]
  variables:
    ASAN_OPTIONS: $[[ inputs.asan-options ]]
    _INTERNAL_MESON_ARGS: "-Db_sanitize=address"
    # https://clang.llvm.org/docs/AddressSanitizer.html#usage
    CFLAGS: "-fno-omit-frame-pointer -O1 -fno-optimize-sibling-calls -g"
  script:
    - *test
  rules:
    - if: '"$[[ inputs.asan ]]" == "enabled" && "$[[ inputs.run-tests ]]" == "yes"'

"$[[ inputs.job-name ]]-lsan":
  extends: ".$[[ inputs.job-name ]] common"
  needs:
    - job: "$[[ inputs.job-name ]]"
      artifacts: false
  # ASAN requires debugging capabilities
  tags: ["asan"]
  variables:
    ASAN_OPTIONS: $[[ inputs.lsan-options ]]
    _INTERNAL_MESON_ARGS: "-Db_sanitize=leak"
    # https://clang.llvm.org/docs/AddressSanitizer.html#usage
    CFLAGS: "-fno-omit-frame-pointer -O1 -fno-optimize-sibling-calls -g"
  script:
    - *test
  rules:
    - if: '"$[[ inputs.lsan ]]" == "enabled" && "$[[ inputs.run-tests ]]" == "yes"'

"$[[ inputs.job-name ]]-tsan":
  extends: ".$[[ inputs.job-name ]] common"
  needs:
    - job: "$[[ inputs.job-name ]]"
      artifacts: false
  variables:
    TSAN_OPTIONS: $[[ inputs.tsan-options ]]
    _INTERNAL_MESON_ARGS: "-Db_sanitize=thread"
  script:
    - *test
  rules:
    - if: '"$[[ inputs.tsan ]]" == "enabled" && "$[[ inputs.run-tests ]]" == "yes"'

"$[[ inputs.job-name ]]-ubsan":
  extends: ".$[[ inputs.job-name ]] common"
  needs:
    - job: "$[[ inputs.job-name ]]"
      artifacts: false
  variables:
    UBSAN_OPTIONS: $[[ inputs.ubsan-options ]]
    _INTERNAL_MESON_ARGS: "-Db_sanitize=undefined"
    # https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#stack-traces-and-report-symbolization
    # FIXME: fno-sanitize-merge is not available in gcc
    CFLAGS: "-fno-omit-frame-pointer -g"
  script:
    - *test
  rules:
    - if: '"$[[ inputs.ubsan ]]" == "enabled" && "$[[ inputs.run-tests ]]" == "yes"'

"$[[ inputs.job-name ]]-grcov-c":
  extends: ".$[[ inputs.job-name ]] common"
  needs:
    - job: "$[[ inputs.job-name ]]"
      artifacts: false
  variables:
    _INTERNAL_MESON_ARGS: "--buildtype=debug"
    CFLAGS: "-coverage -ftest-coverage -fprofile-arcs -fno-omit-frame-pointer -g"
  script:
    - *test

    - mkdir -p public_grcov
    - grcov ${_BUILDDIR} --source-dir $[[ inputs.meson-sourcedir]] --prefix-dir ../ --output-type cobertura --branch --ignore-not-existing -o public_grcov/coverage.xml
    - grcov ${_BUILDDIR} --source-dir $[[ inputs.meson-sourcedir]] --prefix-dir ../ --output-type html --branch --ignore-not-existing -o public_grcov/coverage

    # Print "Coverage: 42.42" so .gitlab-ci.yml will pick it up with a regex
    #
    # We scrape this from the HTML report, not the JSON summary, because coverage.json
    # uses no decimal places, just something like "42%".
    - grep -Eo 'abbr title.* %' public_grcov/coverage/index.html | head -n 1 | grep -Eo '[0-9.]+ %' | grep -Eo '[0-9.]+' | awk '{ print "Coverage:", $1 }'
  coverage: '/Coverage: \d+\.\d+/'
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    expose_as: "Link to Coverage Report"
    expire_in: 2 days
    when: "always"
    reports:
      coverage_report:
        coverage_format: cobertura
        path: public_grcov/coverage.xml
    paths:
      - "${_BUILDDIR_FOR_ARTIFACTS}/meson-logs/"
      - "public_grcov/"
      - "public_grcov/coverage/index.html"
  rules:
    - if: '"$[[ inputs.grcov-c ]]" == "enabled" && "$[[ inputs.run-tests ]]" == "yes"'

"$[[ inputs.job-name ]]-scan-build":
  extends: ".$[[ inputs.job-name ]] common"
  needs:
    - job: "$[[ inputs.job-name ]]"
      artifacts: false
  variables:
    # https://clang.llvm.org/docs/analyzer/user-docs/CommandLineUsage.html#always-analyze-a-project-in-its-debug-configuration
    _INTERNAL_MESON_ARGS: "--buildtype=debug"
  script:
    - *build
    - ninja -C ${_BUILDDIR} scan-build
    # The scan-build command creates builddir/meson-logs/scanbuild/UUID which is annoying,
    # so we copy it to a friendly name instead. The "known" name makes writing an index page
    # easier (if you are combining reports from multiple tools).
    # If there are no bugs found, scanbuild removes the directory and then cp will complain
    # cp: cannot stat '/builds/GNOME/yelp-xsl/_builddir/meson-logs/scanbuild/*': No such file or directory
    - cp -r ${_BUILDDIR}/meson-logs/scanbuild/* public_scanbuild/ || true
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    expose_as: "Link to Scanbuild Report"
    expire_in: 2 days
    when: always
    paths:
      - "${_BUILDDIR_FOR_ARTIFACTS}/meson-logs/"
      - "public_scanbuild/"
      - "public_scanbuild/index.html"
  rules:
    - if: '"$[[ inputs.scan-build ]]" == "enabled"'
